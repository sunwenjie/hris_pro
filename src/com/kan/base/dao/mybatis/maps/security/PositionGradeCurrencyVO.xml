<?xml version="1.0" encoding="utf-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kan.base.domain.security.PositionGradeCurrencyVO">

	<resultMap type="com.kan.base.domain.security.PositionGradeCurrencyVO" id="result">
		<result property="positionGradeId" column="positionGradeId" />
		<result property="accountId" column="accountId" />
		<result property="currencyId" column="currencyId" />
		<result property="minSalary" column="minSalary" />
		<result property="maxSalary" column="maxSalary" />
		<result property="deleted" column="deleted" />
		<result property="status" column="status" />
		<result property="remark1" column="remark1" />
		<result property="remark2" column="remark2" />
		<result property="remark3" column="remark3" />
		<result property="remark4" column="remark4" />
		<result property="remark5" column="remark5" />
		<result property="modifyBy" column="modifyBy" />
		<result property="modifyDate" column="modifyDate" />
		<result property="createBy" column="createBy" />
		<result property="createDate" column="createDate" />
	</resultMap>

	<sql id="positionGradeCurrencyColumns">
		positionGradeId,accountId, currencyId, minSalary, maxSalary, deleted, status, remark1, remark2, remark3, remark4, remark5, createBy, createDate, modifyBy, modifyDate
	</sql>

	<select id="countPositionGradeCurrencyVOsByCondition" parameterType="positionGradeCurrency" resultType="int">
		select count(*)
		from HRO_Sec_Position_Grade_Currency
		where deleted=1 AND accountId= #{accountId} AND positionGradeId = #{positionGradeId}
		<if test="currencyId != null and currencyId != ''">
			AND currencyId = #{currencyId}
		</if>
	</select>

	<select id="getPositionGradeCurrencyVOsByCondition" parameterType="positionGradeCurrency" resultMap="result">
		select positionGradeId, <include refid="positionGradeCurrencyColumns" />
		from HRO_Sec_Position_Grade_Currency
		where deleted = 1 AND accountId= #{accountId} AND positionGradeId = #{positionGradeId}
		<if test="currencyId != null and currencyId != ''">
			AND currencyId = #{currencyId}
		</if>
		<if test="sortColumn != null and sortColumn != '' and sortOrder != null and sortOrder != ''">
			order by ${sortColumn} ${sortOrder}
		</if>
	</select>
	
	<select id="getAllPositionGradeCurrencyVOsByCondition" parameterType="positionGradeCurrency" resultMap="result">
		select positionGradeId, <include refid="positionGradeCurrencyColumns" />
		from HRO_Sec_Position_Grade_Currency
		where accountId= #{accountId} AND positionGradeId = #{positionGradeId}
	</select>
				
	<select id="getPositionGradeCurrencyVOByCondition" parameterType="positionGradeCurrency" resultMap="result">
		select positionGradeId, <include refid="positionGradeCurrencyColumns" />
		from HRO_Sec_Position_Grade_Currency
		where positionGradeId = #{positionGradeId} AND currencyId = #{currencyId}
	</select>
	
	<insert id="insertPositionGradeCurrency" parameterType="positionGradeCurrency" useGeneratedKeys="true" keyProperty="positionGradeId">
		insert into HRO_Sec_Position_Grade_Currency( <include refid="positionGradeCurrencyColumns" /> )
			values(#{positionGradeId}, #{accountId}, #{currencyId}, #{minSalary}, #{maxSalary}, 1, #{status}, #{remark1}, #{remark2}, #{remark3}, 
				#{remark4}, #{remark5}, #{createBy}, #{createDate}, #{modifyBy}, #{modifyDate})
	</insert>

	<delete id="deletePositionGradeCurrencyByCondition" parameterType="positionGradeCurrency">
		update HRO_Sec_Position_Grade_Currency set deleted = 2, modifyBy = #{modifyBy}, modifyDate = #{modifyDate} 
		where positionGradeId = #{positionGradeId} AND currencyId = #{currencyId}
	</delete>
	
	<update id="updatePositionGradeCurrencyByCondition" parameterType="positionGradeCurrency" >
		update HRO_Sec_Position_Grade_Currency set positionGradeId = #{positionGradeId}, accountId = #{accountId}, currencyId = #{currencyId}, 
			minSalary = #{minSalary}, maxSalary = #{maxSalary}, deleted = #{deleted}, status = #{status}, remark1 = #{remark1}, remark2 = #{remark2}, 
			remark3 = #{remark3}, remark4 = #{remark4}, remark5 = #{remark5}, modifyBy = #{modifyBy}, modifyDate = #{modifyDate}
		where positionGradeId = #{positionGradeId} and currencyId = #{currencyId}
	</update>	
	
</mapper>
