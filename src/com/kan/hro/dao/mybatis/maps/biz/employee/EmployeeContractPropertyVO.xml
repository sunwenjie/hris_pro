<?xml version="1.0" encoding="utf-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kan.hro.domain.biz.employee.EmployeeContractPropertyVO">

	<resultMap id="result" type="com.kan.hro.domain.biz.employee.EmployeeContractPropertyVO">
		<result property="propertyId" column="propertyId" />
		<result property="contractId" column="contractId" />
		<result property="propertyName" column="propertyName" />
		<result property="propertyValue" column="propertyValue" />
		<result property="valueType" column="valueType" />
		<result property="description" column="description" />
		<result property="deleted" column="deleted" />
		<result property="status" column="status" />
		<result property="remark1" column="remark1" />
		<result property="remark2" column="remark2" />
		<result property="createBy" column="createBy" />
		<result property="createDate" column="createDate" />
		<result property="modifyBy" column="modifyBy" />
		<result property="modifyDate" column="modifyDate" />
		<result property="propertyName" column="propertyName" />
	</resultMap>
  	
	<sql id="EmployeeContractPropertyColumns">
		contractId, propertyName, propertyValue, valueType, description, deleted, status, remark1, remark2, createBy,
		createDate, modifyBy, modifyDate 
	</sql>

	<select id="countEmployeeContractPropertyVOsByCondition" parameterType="clientContractProperty"
		resultType="int">
		SELECT COUNT(*)
		FROM HRO_BIZ_Employee_Contract_Property
		WHERE deleted = 1
		<if test="propertyName != null and propertyName != ''">
			AND propertyName LIKE CONCAT('%', '${propertyName}', '%') 
		</if>
		<if test="propertyValue != null and propertyValue != ''">
			AND propertyValue LIKE CONCAT('%', '${propertyValue}', '%') 
		</if>
		<if test="contractId != null and contractId != ''">
			AND (contractId = #{contractId} OR 0 = #{contractId})
		</if>
		<if test="valueType != null and valueType != ''">
			AND (valueType = #{valueType} OR 0 = #{valueType})
		</if>
		<if test="description != null and description != ''">
			AND (description = #{description} OR 0 = #{description})
		</if>
		<if test="status != null and status != ''">
			AND (status = #{status} OR 0 = #{status})
		</if>
	</select>

	<select id="getEmployeeContractPropertyVOsByCondition" parameterType="clientContractProperty"
		resultMap="result">
		SELECT locationId, <include refid="EmployeeContractPropertyColumns"/>  
		FROM HRO_BIZ_Employee_Contract_Property 
		WHERE deleted = 1
		<if test="propertyName != null and propertyName != ''">
			AND propertyName LIKE CONCAT('%', '${propertyName}', '%') 
		</if>
		<if test="propertyValue != null and propertyValue != ''">
			AND propertyValue LIKE CONCAT('%', '${propertyValue}', '%') 
		</if>
		<if test="contractId != null and contractId != ''">
			AND (contractId = #{contractId} OR 0 = #{contractId})
		</if>
		<if test="valueType != null and valueType != ''">
			AND (valueType = #{valueType} OR 0 = #{valueType})
		</if>
		<if test="description != null and description != ''">
			AND (description = #{description} OR 0 = #{description})
		</if>
		<if test="status != null and status != ''">
			AND (status = #{status} OR 0 = #{status})
		</if>
		<if test="sortColumn != null and sortColumn != '' and sortOrder != null and sortOrder != ''">
			ORDER BY ${sortColumn} ${sortOrder}
		</if>
	</select>

	<select id="getEmployeeContractPropertyVOByContractPropertyId" parameterType="int"
		resultMap="result">
		SELECT locationId, <include refid="EmployeeContractPropertyColumns"/>  
		FROM HRO_BIZ_Employee_Contract_Property 
		WHERE deleted = 1 AND propertyId = #{propertyId}
	</select>

	<update id="updateEmployeeContractProperty" parameterType="clientContractProperty">
		UPDATE HRO_BIZ_Employee_Contract_Property SET contractId = #{contractId}, propertyValue = #{propertyValue},
			propertyName = #{propertyName}, valueType = #{valueType}, description = #{description},
			deleted = #{deleted}, status = #{status}, remark1 = #{remark1}, remark2 = #{remark2},
			modifyBy = #{modifyBy}, modifyDate = #{modifyDate}
		WHERE  propertyId = #{propertyId} 
  	</update>

	<insert id="insertEmployeeContractProperty" parameterType="clientContractProperty"
		useGeneratedKeys="true" keyProperty="propertyId">
		INSERT INTO HRO_BIZ_Employee_Contract_Property( <include refid="EmployeeContractPropertyColumns" /> )
		VALUES (#{contractId}, #{propertyName}, #{propertyValue}, #{valueType}, #{description},
		1, #{status}, #{remark1}, #{remark2}, #{createBy}, #{createDate}, #{modifyBy}, #{modifyDate})
	</insert>

	<delete id="deleteEmployeeContractProperty" parameterType="int">
		DELETE FROM HRO_BIZ_Employee_Contract_Property where propertyId = #{value}
  	</delete>
  	
  	<select id="getEmployeeContractPropertyVOsByContractId" parameterType="int" resultMap="result">
		SELECT propertyId, <include refid="EmployeeContractPropertyColumns"/>  
		FROM HRO_BIZ_Employee_Contract_Property 
		WHERE deleted = 1 AND contractId = #{value}
	</select>

</mapper>