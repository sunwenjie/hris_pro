<?xml version="1.0" encoding="utf-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kan.hro.domain.biz.employee.EmployeeSalaryAdjustmentVO">

	<resultMap id="result" type="com.kan.hro.domain.biz.employee.EmployeeSalaryAdjustmentVO">
		<result property="salaryAdjustmentId" column="salaryAdjustmentId" />
		<result property="accountId" column="accountId" />
		<result property="corpId" column="corpId" />
		<result property="employeeId" column="employeeId" />
		<result property="contractId" column="contractId" />
		<result property="employeeSalaryId" column="employeeSalaryId" />
		<result property="oldBase" column="oldBase" />
		<result property="oldStartDate" column="oldStartDate" />
		<result property="oldEndDate" column="oldEndDate" />
		<result property="newBase" column="newBase" />
		<result property="newStartDate" column="newStartDate" />
		<result property="newEndDate" column="newEndDate" />
		<result property="effectiveDate" column="effectiveDate" />
		<result property="positionStatus" column="positionStatus" />
		<result property="status" column="status" />
		<result property="submitFlag" column="submitFlag" />
		<result property="description" column="description" />
		<result property="remark1" column="remark1"/>
		<result property="remark2" column="remark2"/>
		<result property="remark3" column="remark3"/>
		<result property="remark4" column="remark4"/>
		<result property="remark5" column="remark5"/>
		<result property="createBy" column="createBy" />
		<result property="createDate" column="createDate" />
		<result property="modifyBy" column="modifyBy" />
		<result property="modifyDate" column="modifyDate" />
		
		<result property="employeeContractNameZH" column="employeeContractNameZH" />
		<result property="employeeContractNameEN" column="employeeContractNameEN" />
		<result property="employeeContractStartDate" column="employeeContractStartDate" />
		<result property="employeeContractEndDate" column="employeeContractEndDate" />
		
		<result property="employeeNo" column="employeeNo" />
		<result property="employeeNameZH" column="employeeNameZH" />
		<result property="employeeNameEN" column="employeeNameEN" />
		<result property="employeeCertificateNumber" column="employeeCertificateNumber" />
		<result property="itemId" column="itemId" />
		<result property="itemNameZH" column="itemNameZH" />
		<result property="itemNameEN" column="itemNameEN" />
		
		
		<!-- For workflow -->
		<result property="startDate" column="startDate" />
		<result property="endDate" column="endDate" />
		<result property="_tempPositionIds" column="_tempPositionIds" />
		<result property="_tempBranchIds" column="_tempBranchIds" />
		<result property="settlementBranch" column="settlementBranch" />
		<result property="entityId" column="entityId" />
		<result property="owner" column="owner" />
		
	</resultMap>

	<sql id="salaryAdjustmentColumns">
		accountId,corpId,employeeId,contractId,
		employeeSalaryId,
		oldBase,oldStartDate,oldEndDate,
		newBase,newStartDate, newEndDate,
		effectiveDate,deleted,status,itemId,itemNameZH,itemNameEN,
		description,remark1,remark2,remark3,remark4,remark5,
		createBy,createDate,modifyBy,modifyDate
	</sql>	
	
	<sql id="salaryAdjustmentColumns-for-join">
		a.salaryAdjustmentId,
		a.accountId,a.corpId,a.employeeId,a.contractId,
		a.employeeSalaryId,
		a.oldBase-getIncrement(getPublicCode(a.employeeId), 'PRIVATE_CODE') as oldBase,a.oldStartDate,a.oldEndDate,
		a.newBase-getIncrement(getPublicCode(a.employeeId), 'PRIVATE_CODE') as newBase,a.newStartDate,a.newEndDate,
		a.effectiveDate,a.deleted,a.status,a.itemId,a.itemNameZH,a.itemNameEN,a.description,
		a.remark1,a.remark2,a.remark3,a.remark4,a.remark5,
		a.createBy,a.createDate,a.modifyBy,a.modifyDate
	</sql>
	
	<select id="countEmployeeSalaryAdjustmentVOsByCondition" parameterType="employeeSalaryAdjustment" resultType="int">
		SELECT COUNT(0)
		FROM
		(
			SELECT 
				COUNT(DISTINCT a.salaryAdjustmentId) AS count,
				CASE 
					WHEN h.objectType = 3 THEN 2
					WHEN h.objectType = 31 THEN a.status
					WHEN h.objectType = 32 THEN 4
					WHEN h.objectType IS NULL THEN a.status
					ELSE a.status
				END workflowStatus	
			FROM
				hro_biz_employee_salary_adjustment a
			LEFT JOIN hro_biz_employee b ON a.employeeId = b.employeeId
			LEFT JOIN hro_biz_employee_contract c ON a.contractId = c.contractId
			LEFT JOIN hro_biz_employee_contract_salary d ON a.employeeSalaryId = d.employeeSalaryId AND a.employeeSalaryId = d.employeeSalaryId
			LEFT JOIN 
			(
				SELECT workflowId, objectId, objectType
				FROM hro_history WHERE deleted = 1 and accessAction = 'HRO_EMPLOYEE_SALARY_ADJUSTMENT' ORDER BY historyId DESC	
			) h ON a.salaryAdjustmentId = h.objectId
			WHERE a.accountId = #{accountId} AND a.deleted = 1
			<if test="employeeId != null and employeeId != ''">
				AND a.employeeId = #{employeeId} 
			</if>
			<if test="employeeNo != null and employeeNo != ''">
				AND b.employeeNo = #{employeeNo} 
			</if>
			<if test="employeeNameZH != null and employeeNameZH != ''">
				AND b.nameZH LIKE CONCAT('%', '${employeeNameZH}', '%')
			</if>
			<if test="employeeNameEN != null and employeeNameEN != ''">
				AND b.nameEN LIKE CONCAT('%', '${employeeNameEN}', '%')
			</if>
			<if test="employeeCertificateNumber != null and employeeCertificateNumber != ''">
				AND b.certificateNumber = #{employeeCertificateNumber} 
			</if>
			<if test="contractId != null and contractId != ''">
				AND a.contractId = #{contractId} 
			</if>
			<if test="employeeContractNameZH != null and employeeContractNameZH != ''">
				AND c.nameZH LIKE CONCAT('%', '${employeeContractNameZH}', '%')
			</if>
			<if test="employeeContractNameEN != null and employeeContractNameEN != ''">
				AND c.nameEN LIKE CONCAT('%', '${employeeContractNameEN}', '%')
			</if>
			
			<if test="rulePublic == 1">
				AND ( false 
				<if test="rulePrivateIds !=null">
					 OR c.employeeId in
					<foreach collection="rulePrivateIds" item="rulePrivateId"  open="(" separator="," close=")">  
		        		#{rulePrivateId}
		     		</foreach>
				</if>
				<if test="rulePositionIds !=null">
					OR c.owner in
					<foreach collection="rulePositionIds" item="rulePositionId"  open="(" separator="," close=")">  
		        		#{rulePositionId}
		     		</foreach>
				</if>
				<if test="ruleBranchIds !=null">
					OR b._tempBranchIds in
					<foreach collection="ruleBranchIds" item="ruleBranchId"  open="(" separator="," close=")">  
		        		#{ruleBranchId}
		     		</foreach>
				</if>
				<if test="ruleBusinessTypeIds !=null">
					OR b.businessTypeId in
					<foreach collection="ruleBusinessTypeIds" item="ruleBusinessTypeId"  open="(" separator="," close=")">  
		        		#{ruleBusinessTypeId}
		     		</foreach>
				</if>
				<if test="ruleEntityIds !=null">
					OR c.entityId in
					<foreach collection="ruleEntityIds" item="ruleEntityId"  open="(" separator="," close=")">  
		        		#{ruleEntityId}
		     		</foreach>
				</if>
				)
			</if>
			GROUP BY a.salaryAdjustmentId
			<!-- // 0:请选择##1:新建##2:提交-待批准##3:批准##4:拒绝##5:已生效 -->
			<if test="status != null and status != '' and status != 0">
				HAVING workflowStatus = #{status}
			</if>
			) temp
	</select>
	
	<select id="getEmployeeSalaryAdjustmentVOsByCondition" parameterType="employeeSalaryAdjustment" resultMap="result">
		
		SELECT DISTINCT <include refid="salaryAdjustmentColumns-for-join" />,
			b.employeeNo AS employeeNo,
			b.nameZH AS employeeNameZH,
			b.nameEN AS employeeNameEN,
			b.certificateNumber AS employeeCertificateNumber,
		  	c.nameZH AS employeeContractNameZH,
			c.nameEN AS employeeContractNameEN,
			c.startDate AS employeeContractStartDate,
			c.endDate AS employeeContractEndDate,
			h1.workflowId AS workflowId,
			CASE 
				WHEN h.objectType = 3 THEN 2
				WHEN h.objectType = 31 THEN a.status
				WHEN h.objectType = 32 THEN 4
				WHEN h.objectType IS NULL THEN a.status
				ELSE a.status
			END workflowStatus	
		FROM
			hro_biz_employee_salary_adjustment a
		LEFT JOIN hro_biz_employee b ON a.employeeId = b.employeeId
		LEFT JOIN hro_biz_employee_contract c ON a.contractId = c.contractId
		LEFT JOIN hro_biz_employee_contract_salary d ON a.employeeSalaryId = d.employeeSalaryId AND a.employeeSalaryId = d.employeeSalaryId
		LEFT JOIN hro_history h1 ON h1.objectId = a.salaryAdjustmentId AND h1.deleted = 1 AND h1.accessAction = 'HRO_EMPLOYEE_SALARY_ADJUSTMENT' AND h1.objectType = 3
		LEFT JOIN 
		(
			SELECT workflowId, objectId, objectType
			FROM hro_history WHERE deleted = 1 and accessAction = 'HRO_EMPLOYEE_SALARY_ADJUSTMENT' ORDER BY historyId DESC	
		) h ON a.salaryAdjustmentId = h.objectId
		WHERE a.deleted = 1 AND a.accountId = #{accountId}
		<if test="employeeId != null and employeeId != ''">
			AND a.employeeId = #{employeeId} 
		</if>
		<if test="employeeNo != null and employeeNo != ''">
			AND b.employeeNo = #{employeeNo} 
		</if>
		<if test="employeeNameZH != null and employeeNameZH != ''">
			AND b.nameZH LIKE CONCAT('%', '${employeeNameZH}', '%')
		</if>
		<if test="employeeNameEN != null and employeeNameEN != ''">
			AND b.nameEN LIKE CONCAT('%', '${employeeNameEN}', '%')
		</if>
		<if test="employeeCertificateNumber != null and employeeCertificateNumber != ''">
			AND b.certificateNumber = #{employeeCertificateNumber} 
		</if>
		<if test="contractId != null and contractId != ''">
			AND a.contractId = #{contractId} 
		</if>
		<if test="employeeContractNameZH != null and employeeContractNameZH != ''">
			AND c.nameZH LIKE CONCAT('%', '${employeeContractNameZH}', '%')
		</if>
		<if test="employeeContractNameEN != null and employeeContractNameEN != ''">
			AND c.nameEN LIKE CONCAT('%', '${employeeContractNameEN}', '%')
		</if>
		
		<if test="rulePublic == 1">
			AND ( false 
			<if test="rulePrivateIds !=null">
				 OR c.employeeId in
				<foreach collection="rulePrivateIds" item="rulePrivateId"  open="(" separator="," close=")">  
	        		#{rulePrivateId}
	     		</foreach>
			</if>
			<if test="rulePositionIds !=null">
				OR c.owner in
				<foreach collection="rulePositionIds" item="rulePositionId"  open="(" separator="," close=")">  
	        		#{rulePositionId}
	     		</foreach>
			</if>
			<if test="ruleBranchIds !=null">
				OR b._tempBranchIds in
				<foreach collection="ruleBranchIds" item="ruleBranchId"  open="(" separator="," close=")">  
	        		#{ruleBranchId}
	     		</foreach>
			</if>
			<if test="ruleBusinessTypeIds !=null">
				OR b.businessTypeId in
				<foreach collection="ruleBusinessTypeIds" item="ruleBusinessTypeId"  open="(" separator="," close=")">  
	        		#{ruleBusinessTypeId}
	     		</foreach>
			</if>
			<if test="ruleEntityIds !=null">
				OR c.entityId in
				<foreach collection="ruleEntityIds" item="ruleEntityId"  open="(" separator="," close=")">  
	        		#{ruleEntityId}
	     		</foreach>
			</if>
			)
		</if>
		GROUP BY a.salaryAdjustmentId
		<!-- // 0:请选择##1:新建##2:提交-待批准##3:批准##4:拒绝##5:已生效 -->
		<if test="status != null and status != '' and status != 0">
			HAVING workflowStatus = #{status}
		</if>
		<if	test="sortColumn != null and sortColumn != '' and sortOrder != null and sortOrder != ''">
			ORDER BY ${sortColumn} ${sortOrder}
		</if>
	</select>
	
	<select id="getEmployeeSalaryAdjustmentVOBySalaryAdjustmentId" parameterType="int" resultMap="result">
		SELECT DISTINCT <include refid="salaryAdjustmentColumns-for-join" />,
			b.employeeNo AS employeeNo,
			b.nameZH AS employeeNameZH,
			b.nameEN AS employeeNameEN,
			b.certificateNumber AS employeeCertificateNumber,
		  	c.nameZH AS employeeContractNameZH,
			c.nameEN AS employeeContractNameEN,
			c.startDate AS employeeContractStartDate,
			c.endDate AS employeeContractEndDate,
			d.employeeSalaryId AS employeeSalaryId,
			d.itemId AS itemId,
			i.nameZH AS itemNameZH,
			i.nameEN AS itemNameEN,
			(
				SELECT
					MAX(h.workflowId)
				FROM
					hro_history h
				WHERE
				    h.objectType = 3 AND h.objectId = a.salaryAdjustmentId
				AND h.objectId = a.salaryAdjustmentId
				AND h.accessAction = 'HRO_EMPLOYEE_SALARY_ADJUSTMENT'
					
			) AS workflowId,
			
			c.startDate as startDate,
			c.endDate as endDate,
			b._tempPositionIds as _tempPositionIds,
			b._tempBranchIds as _tempBranchIds,
			c.settlementBranch as settlementBranch,
			c.entityId as entityId,
			c.`owner` as owner
		FROM
			hro_biz_employee_salary_adjustment a
		LEFT JOIN hro_biz_employee b ON a.employeeId = b.employeeId
		LEFT JOIN hro_biz_employee_contract c ON a.contractId = c.contractId and c.deleted = 1 and c.employStatus = 1
		LEFT JOIN hro_biz_employee_contract_salary d ON a.employeeSalaryId = d.employeeSalaryId
		LEFT JOIN hro_mgt_item i on i.itemId = d.itemId
		AND a.employeeSalaryId = d.employeeSalaryId
		WHERE
			a.salaryAdjustmentId = #{salaryAdjustmentId}
	</select>
	
	<insert id="insertEmployeeSalaryAdjustment" parameterType="employeeSalaryAdjustment" useGeneratedKeys="true" keyProperty="salaryAdjustmentId">
		INSERT INTO hro_biz_employee_salary_adjustment(<include refid="salaryAdjustmentColumns" />)
		VALUES(
				#{accountId}, #{corpId}, #{employeeId},#{contractId},
				#{employeeSalaryId},
				#{oldBase},#{oldStartDate},#{oldEndDate}, 
			   	#{newBase},#{newStartDate},#{newEndDate}, 
			   	#{effectiveDate},1,#{status},#{itemId},#{itemNameZH},#{itemNameEN},#{description},
			   	#{remark1},#{remark2},#{remark3},#{remark4},#{remark5},
		       	#{createBy}, #{createDate}, #{modifyBy}, #{modifyDate}
		      )
	</insert>

	<update id="updateEmployeeSalaryAdjustment" parameterType="employeeSalaryAdjustment">
		UPDATE hro_biz_employee_salary_adjustment 
		SET 
			accountId=#{accountId},
			corpId=#{corpId},
			employeeId=#{employeeId},
			contractId=#{contractId},
			employeeSalaryId=#{employeeSalaryId},
			oldBase=#{oldBase},
			oldStartDate=#{oldStartDate},
			oldEndDate=#{oldEndDate},
			newBase=#{newBase},
			newStartDate=#{newStartDate},
			newEndDate=#{newEndDate},
			effectiveDate=#{effectiveDate},
			deleted = #{deleted},
			status = #{status},
			itemId = #{itemId},
			itemNameZH = #{itemNameZH},
			itemNameEN = #{itemNameEN},
			description = #{description},
			remark1 = #{remark1},
			remark2 = #{remark2},
			remark3 = #{remark3},
			remark4 = #{remark4},
			remark5 = #{remark5},
			createBy = #{createBy}, 
			createDate = #{createDate}, 
			modifyBy = #{modifyBy}, 
			modifyDate = #{modifyDate}
		WHERE salaryAdjustmentId = #{salaryAdjustmentId} 
	</update>	
	
	<update id="deleteEmployeeSalaryAdjustment" parameterType="int">
		UPDATE hro_biz_employee_salary_adjustment SET deleted = 2 WHERE salaryAdjustmentId = #{salaryAdjustmentId}
  	</update>
  	
  	<select id="getEmployeeSalaryAdjustmentVOByStatusAndDate" parameterType="employeeSalaryAdjustment" resultMap="result">
  		SELECT
			<include refid="salaryAdjustmentColumns-for-join" />
		FROM
			hro_biz_employee_salary_adjustment a 
		WHERE 
			a.status = #{status}
		AND a.deleted = 1
		<![CDATA[ AND a.effectiveDate <= #{effectiveDate} ]]>
		ORDER BY a.salaryAdjustmentId
  	</select>
  	
	<update id="updateEmployeeSalaryAdjustmentStatus" parameterType="employeeSalaryAdjustment">
		UPDATE hro_biz_employee_salary_adjustment 
		SET 
			status = #{status},
			modifyBy = #{modifyBy}, 
			modifyDate = #{modifyDate}
		WHERE salaryAdjustmentId = #{salaryAdjustmentId} 
	</update>
	
	<select id="getEmployeeSalaryAdjustmentVOCountBySalaryIdAndContractId" parameterType="employeeSalaryAdjustment" resultType="int">
		SELECT count(1) from hro_biz_employee_salary_adjustment where contractId = #{contractId} and employeeSalaryId = #{employeeSalaryId} and deleted = 1 and status != 5
		<if	test="salaryAdjustmentId != null and salaryAdjustmentId != ''">
			AND salaryAdjustmentId != #{salaryAdjustmentId} 
		</if>
	</select>
  	
</mapper>
